import sqlite3
import logging
import os
import qrcode
from io import BytesIO
from PIL import Image
from pyzbar.pyzbar import decode
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InputMediaPhoto,
    Location,
    ParseMode
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    ConversationHandler
)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE = 'school_bot.db'
TOKEN = '7640183456:AAHoRsfFowq9KTbH-XLi-krhDC42MjlbklM'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_USERNAME = 'School292_bot'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —é–∑–µ—Ä–Ω–µ–π–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –±–µ–∑ @

# –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ Telegram ID
INITIAL_ADMIN_IDS = [
    713459791,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    701246470,
    # –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ Telegram ID –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    ADD_STUDENT_NUMBER,
    ADD_STUDENT_NAME,
    ADD_STUDENT_SURNAME,
    ADD_STUDENT_PATRONYMIC,
    ADD_STUDENT_BIRTH_YEAR,
    ADD_STUDENT_PARENT_NUMBERS,
    ADD_STUDENT_PARENT_BIRTH_YEAR,
    ADD_STUDENT_LOCATION,
    ADD_STUDENT_PHOTO,
    ADD_STUDENT_PARENT_PHOTO,
    SEARCH_STUDENT_NUMBER,
) = range(11)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DATABASE)
    c = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ —É—á–µ–Ω–∏–∫–æ–≤
    c.execute('''
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            student_number INTEGER UNIQUE,
            photo BLOB,
            first_name TEXT,
            last_name TEXT,
            patronymic TEXT,
            birth_year INTEGER,
            parent_numbers TEXT,
            parent_photos BLOB,
            parent_birth_year INTEGER,
            parent_location_lat REAL,
            parent_location_lon REAL,
            qr_code BLOB
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —É—á–∏—Ç–µ–ª–µ–π
    c.execute('''
        CREATE TABLE IF NOT EXISTS teachers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE
        )
    ''')
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for admin_id in INITIAL_ADMIN_IDS:
        try:
            c.execute("INSERT OR IGNORE INTO teachers (user_id) VALUES (?)", (admin_id,))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
    
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∏—Ç–µ–ª–µ–º
def is_teacher(user_id):
    conn = sqlite3.connect(DATABASE)
    c = conn.cursor()
    c.execute("SELECT * FROM teachers WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result is not None

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add_teacher <user_id>
def add_teacher_command(update: Update, context: CallbackContext):
    if not is_teacher(update.effective_user.id):
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if len(context.args) != 1:
        update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_teacher <user_id>")
        return
    try:
        user_id = int(context.args[0])
    except ValueError:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π Telegram ID.")
        return
    try:
        conn = sqlite3.connect(DATABASE)
        c = conn.cursor()
        c.execute("INSERT INTO teachers (user_id) VALUES (?)", (user_id,))
        conn.commit()
        conn.close()
        update.message.reply_text(f"‚úÖ –£—á–∏—Ç–µ–ª—å —Å Telegram ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
    except sqlite3.IntegrityError:
        update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∏—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.error(e)
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∏—Ç–µ–ª—è.")

# –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /delete_teacher <user_id>
def delete_teacher_command(update: Update, context: CallbackContext):
    if not is_teacher(update.effective_user.id):
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if len(context.args) != 1:
        update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_teacher <user_id>")
        return
    try:
        user_id = int(context.args[0])
    except ValueError:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π Telegram ID.")
        return
    conn = sqlite3.connect(DATABASE)
    c = conn.cursor()
    c.execute("DELETE FROM teachers WHERE user_id = ?", (user_id,))
    if c.rowcount == 0:
        update.message.reply_text("‚ö†Ô∏è –£—á–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        update.message.reply_text(f"‚úÖ –£—á–∏—Ç–µ–ª—å —Å Telegram ID {user_id} —É–¥–∞–ª–µ–Ω.")
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ (ConversationHandler)
def add_student_start(update: Update, context: CallbackContext):
    if not is_teacher(update.effective_user.id):
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END
    update.message.reply_text(
        "üìã –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True, one_time_keyboard=True
        )
    )
    return ADD_STUDENT_NUMBER

def add_student_number(update: Update, context: CallbackContext):
    if update.message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
        return add_student_cancel(update, context)
    student_number = update.message.text.strip()
    if not student_number.isdigit():
        update.message.reply_text("‚ùå –ù–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return ADD_STUDENT_NUMBER
    context.user_data['student_number'] = int(student_number)
    update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:")
    return ADD_STUDENT_NAME

def add_student_name(update: Update, context: CallbackContext):
    first_name = update.message.text.strip()
    if not first_name:
        update.message.reply_text("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:")
        return ADD_STUDENT_NAME
    context.user_data['first_name'] = first_name
    update.message.reply_text("üìõ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —É—á–µ–Ω–∏–∫–∞:")
    return ADD_STUDENT_SURNAME

def add_student_surname(update: Update, context: CallbackContext):
    last_name = update.message.text.strip()
    if not last_name:
        update.message.reply_text("‚ùå –§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —É—á–µ–Ω–∏–∫–∞:")
        return ADD_STUDENT_SURNAME
    context.user_data['last_name'] = last_name
    update.message.reply_text("üÜî –í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–∞:")
    return ADD_STUDENT_PATRONYMIC

def add_student_patronymic(update: Update, context: CallbackContext):
    patronymic = update.message.text.strip()
    context.user_data['patronymic'] = patronymic
    update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2005):")
    return ADD_STUDENT_BIRTH_YEAR

def add_student_birth_year(update: Update, context: CallbackContext):
    birth_year = update.message.text.strip()
    if not birth_year.isdigit() or not (1900 <= int(birth_year) <= 2025):
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2005):")
        return ADD_STUDENT_BIRTH_YEAR
    context.user_data['birth_year'] = int(birth_year)
    update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    return ADD_STUDENT_PARENT_NUMBERS

def add_student_parent_numbers(update: Update, context: CallbackContext):
    parent_numbers = update.message.text.strip()
    if not parent_numbers:
        update.message.reply_text("‚ùå –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª–µ–π:")
        return ADD_STUDENT_PARENT_NUMBERS
    context.user_data['parent_numbers'] = parent_numbers
    update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1980):")
    return ADD_STUDENT_PARENT_BIRTH_YEAR

def add_student_parent_birth_year(update: Update, context: CallbackContext):
    parent_birth_year = update.message.text.strip()
    if not parent_birth_year.isdigit() or not (1900 <= int(parent_birth_year) <= 2025):
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1980):")
        return ADD_STUDENT_PARENT_BIRTH_YEAR
    context.user_data['parent_birth_year'] = int(parent_birth_year)
    update.message.reply_text("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é —Ä–æ–¥–∏—Ç–µ–ª–µ–π:")
    return ADD_STUDENT_LOCATION

def add_student_location(update: Update, context: CallbackContext):
    if update.message.location:
        location = update.message.location
        context.user_data['parent_location_lat'] = location.latitude
        context.user_data['parent_location_lon'] = location.longitude
        update.message.reply_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —É—á–µ–Ω–∏–∫–∞:")
        return ADD_STUDENT_PHOTO
    else:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–∫–∞—Ü–∏—é.")
        return ADD_STUDENT_LOCATION

def add_student_photo(update: Update, context: CallbackContext):
    if update.message.photo:
        photo = update.message.photo[-1].get_file()
        photo_bytes = photo.download_as_bytearray()
        context.user_data['photo'] = photo_bytes
        update.message.reply_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π:")
        return ADD_STUDENT_PARENT_PHOTO
    else:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —É—á–µ–Ω–∏–∫–∞:")
        return ADD_STUDENT_PHOTO

def add_student_parent_photo(update: Update, context: CallbackContext):
    if update.message.photo:
        parent_photo = update.message.photo[-1].get_file()
        parent_photo_bytes = parent_photo.download_as_bytearray()
        context.user_data['parent_photos'] = parent_photo_bytes
        # –°–æ—Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        try:
            conn = sqlite3.connect(DATABASE)
            c = conn.cursor()
            student_number = context.user_data['student_number']
            first_name = context.user_data['first_name']
            last_name = context.user_data['last_name']
            patronymic = context.user_data['patronymic']
            birth_year = context.user_data['birth_year']
            parent_numbers = context.user_data['parent_numbers']
            parent_birth_year = context.user_data['parent_birth_year']
            parent_location_lat = context.user_data['parent_location_lat']
            parent_location_lon = context.user_data['parent_location_lon']
            photo = context.user_data['photo']
            parent_photos = context.user_data['parent_photos']
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ —Å –≥–ª—É–±–æ–∫–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
            deep_link = f"https://t.me/{BOT_USERNAME}?start={student_number}"
            qr = qrcode.QRCode(version=1, box_size=10, border=5)
            qr.add_data(deep_link)
            qr.make(fit=True)
            img = qr.make_image(fill='black', back_color='white')
            buf = BytesIO()
            img.save(buf, format='PNG')
            qr_code = buf.getvalue()
            
            c.execute('''
                INSERT INTO students (
                    student_number, photo, first_name, last_name, patronymic, 
                    birth_year, parent_numbers, parent_photos, parent_birth_year,
                    parent_location_lat, parent_location_lon, qr_code
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                student_number,
                photo,
                first_name,
                last_name,
                patronymic,
                birth_year,
                parent_numbers,
                parent_photos,
                parent_birth_year,
                parent_location_lat,
                parent_location_lon,
                qr_code
            ))
            conn.commit()
            conn.close()
            update.message.reply_text("‚úÖ –£—á–µ–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=ReplyKeyboardRemove())
        except sqlite3.IntegrityError:
            update.message.reply_text("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=ReplyKeyboardRemove())
        except Exception as e:
            logger.error(e)
            update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    else:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–æ–¥–∏—Ç–µ–ª–µ–π:")
        return ADD_STUDENT_PARENT_PHOTO

def add_student_cancel(update: Update, context: CallbackContext):
    update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –£–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /delete_student <student_number>
def delete_student_command(update: Update, context: CallbackContext):
    if not is_teacher(update.effective_user.id):
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if len(context.args) != 1:
        update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_student <student_number>")
        return
    student_number = context.args[0]
    if not student_number.isdigit():
        update.message.reply_text("‚ùå –ù–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")
        return
    conn = sqlite3.connect(DATABASE)
    c = conn.cursor()
    c.execute("DELETE FROM students WHERE student_number = ?", (int(student_number),))
    if c.rowcount == 0:
        update.message.reply_text("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        update.message.reply_text(f"‚úÖ –£—á–µ–Ω–∏–∫ —Å –Ω–æ–º–µ—Ä–æ–º {student_number} —É–¥–∞–ª–µ–Ω.")
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ QR-–∫–æ–¥–∞ —É—á–µ–Ω–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /get_qr <student_number>
def get_qr_code_command(update: Update, context: CallbackContext):
    if not is_teacher(update.effective_user.id):
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if len(context.args) != 1:
        update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /get_qr <student_number>")
        return
    student_number = context.args[0]
    if not student_number.isdigit():
        update.message.reply_text("‚ùå –ù–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")
        return
    conn = sqlite3.connect(DATABASE)
    c = conn.cursor()
    c.execute("SELECT qr_code FROM students WHERE student_number = ?", (int(student_number),))
    result = c.fetchone()
    conn.close()
    if result and result[0]:
        qr_code = result[0]
        bot_photo = BytesIO(qr_code)
        bot_photo.name = 'qr_code.png'
        update.message.reply_photo(photo=bot_photo, caption=f"üìÑ QR-–∫–æ–¥ –¥–ª—è —É—á–µ–Ω–∏–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {student_number}.")
    else:
        update.message.reply_text("‚ö†Ô∏è QR-–∫–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É (ConversationHandler)
def search_student_start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True, one_time_keyboard=True
        )
    )
    return SEARCH_STUDENT_NUMBER

def search_student_number(update: Update, context: CallbackContext):
    if update.message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
        update.message.reply_text("‚ùå –ü–æ–∏—Å–∫ —É—á–µ–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    student_number = update.message.text.strip()
    if not student_number.isdigit():
        update.message.reply_text("‚ùå –ù–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return SEARCH_STUDENT_NUMBER
    conn = sqlite3.connect(DATABASE)
    c = conn.cursor()
    c.execute("SELECT * FROM students WHERE student_number = ?", (int(student_number),))
    student = c.fetchone()
    conn.close()
    if student:
        (
            id,
            student_number,
            photo,
            first_name,
            last_name,
            patronymic,
            birth_year,
            parent_numbers,
            parent_photos,
            parent_birth_year,
            parent_location_lat,
            parent_location_lon,
            qr_code,
        ) = student
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —É—á–µ–Ω–∏–∫–∞
        if photo:
            bot_photo = BytesIO(photo)
            bot_photo.name = 'student_photo.jpg'
            update.message.reply_photo(photo=bot_photo)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info = (
            f"üìÑ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–Ω–∏–∫–µ**\n"
            f"**–ù–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞:** {student_number}\n"
            f"**–ò–º—è:** {first_name}\n"
            f"**–§–∞–º–∏–ª–∏—è:** {last_name}\n"
            f"**–û—Ç—á–µ—Å—Ç–≤–æ:** {patronymic}\n"
            f"**–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:** {birth_year}\n"
            f"**–ù–æ–º–µ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π:** {parent_numbers}\n"
            f"**–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:** {parent_birth_year}\n"
        )
        update.message.reply_text(info, parse_mode=ParseMode.MARKDOWN)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
        if parent_location_lat and parent_location_lon:
            update.message.reply_location(latitude=parent_location_lat, longitude=parent_location_lon)
        else:
            update.message.reply_text("‚ùå –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
    else:
        update.message.reply_text("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
def handle_photo(update: Update, context: CallbackContext):
    photo_file = update.message.photo[-1].get_file()
    photo_bytes = photo_file.download_as_bytearray()
    img = Image.open(BytesIO(photo_bytes))
    decoded = decode(img)
    if decoded:
        data = decoded[0].data.decode('utf-8')
        if data.startswith(f"https://t.me/{BOT_USERNAME}?start="):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞ –∏–∑ –≥–ª—É–±–æ–∫–æ–≥–æ —Å—Å—ã–ª–∫–∏
            student_number = data.split('start=')[-1]
            if student_number.isdigit():
                conn = sqlite3.connect(DATABASE)
                c = conn.cursor()
                c.execute("SELECT * FROM students WHERE student_number = ?", (int(student_number),))
                student = c.fetchone()
                conn.close()
                if student:
                    (
                        id,
                        student_number,
                        photo,
                        first_name,
                        last_name,
                        patronymic,
                        birth_year,
                        parent_numbers,
                        parent_photos,
                        parent_birth_year,
                        parent_location_lat,
                        parent_location_lon,
                        qr_code,
                    ) = student
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —É—á–µ–Ω–∏–∫–∞
                    if photo:
                        bot_photo = BytesIO(photo)
                        bot_photo.name = 'student_photo.jpg'
                        update.message.reply_photo(photo=bot_photo)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    info = (
                        f"üìÑ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–Ω–∏–∫–µ**\n"
                        f"**–ù–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞:** {student_number}\n"
                        f"**–ò–º—è:** {first_name}\n"
                        f"**–§–∞–º–∏–ª–∏—è:** {last_name}\n"
                        f"**–û—Ç—á–µ—Å—Ç–≤–æ:** {patronymic}\n"
                        f"**–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:** {birth_year}\n"
                        f"**–ù–æ–º–µ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π:** {parent_numbers}\n"
                        f"**–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:** {parent_birth_year}\n"
                    )
                    update.message.reply_text(info, parse_mode=ParseMode.MARKDOWN)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
                    if parent_location_lat and parent_location_lon:
                        update.message.reply_location(latitude=parent_location_lat, longitude=parent_location_lon)
                    else:
                        update.message.reply_text("‚ùå –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
                else:
                    update.message.reply_text("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                update.message.reply_text("‚ùå QR-–∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞.")
        else:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ QR-–∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞
            if data.isdigit():
                student_number = int(data)
                conn = sqlite3.connect(DATABASE)
                c = conn.cursor()
                c.execute("SELECT * FROM students WHERE student_number = ?", (student_number,))
                student = c.fetchone()
                conn.close()
                if student:
                    (
                        id,
                        student_number,
                        photo,
                        first_name,
                        last_name,
                        patronymic,
                        birth_year,
                        parent_numbers,
                        parent_photos,
                        parent_birth_year,
                        parent_location_lat,
                        parent_location_lon,
                        qr_code,
                    ) = student
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —É—á–µ–Ω–∏–∫–∞
                    if photo:
                        bot_photo = BytesIO(photo)
                        bot_photo.name = 'student_photo.jpg'
                        update.message.reply_photo(photo=bot_photo)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    info = (
                        f"üìÑ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–Ω–∏–∫–µ**\n"
                        f"**–ù–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞:** {student_number}\n"
                        f"**–ò–º—è:** {first_name}\n"
                        f"**–§–∞–º–∏–ª–∏—è:** {last_name}\n"
                        f"**–û—Ç—á–µ—Å—Ç–≤–æ:** {patronymic}\n"
                        f"**–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:** {birth_year}\n"
                        f"**–ù–æ–º–µ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π:** {parent_numbers}\n"
                        f"**–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:** {parent_birth_year}\n"
                    )
                    update.message.reply_text(info, parse_mode=ParseMode.MARKDOWN)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
                    if parent_location_lat and parent_location_lon:
                        update.message.reply_location(latitude=parent_location_lat, longitude=parent_location_lon)
                    else:
                        update.message.reply_text("‚ùå –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
                else:
                    update.message.reply_text("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                update.message.reply_text("‚ùå QR-–∫–æ–¥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞.")
    else:
        update.message.reply_text("‚ùå QR-–∫–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    if context.args:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        student_number = context.args[0]
        if student_number.isdigit():
            conn = sqlite3.connect(DATABASE)
            c = conn.cursor()
            c.execute("SELECT * FROM students WHERE student_number = ?", (int(student_number),))
            student = c.fetchone()
            conn.close()
            if student:
                (
                    id,
                    student_number,
                    photo,
                    first_name,
                    last_name,
                    patronymic,
                    birth_year,
                    parent_numbers,
                    parent_photos,
                    parent_birth_year,
                    parent_location_lat,
                    parent_location_lon,
                    qr_code,
                ) = student
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —É—á–µ–Ω–∏–∫–∞
                if photo:
                    bot_photo = BytesIO(photo)
                    bot_photo.name = 'student_photo.jpg'
                    update.message.reply_photo(photo=bot_photo)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                info = (
                    f"üìÑ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–Ω–∏–∫–µ**\n"
                    f"**–ù–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞:** {student_number}\n"
                    f"**–ò–º—è:** {first_name}\n"
                    f"**–§–∞–º–∏–ª–∏—è:** {last_name}\n"
                    f"**–û—Ç—á–µ—Å—Ç–≤–æ:** {patronymic}\n"
                    f"**–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:** {birth_year}\n"
                    f"**–ù–æ–º–µ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π:** {parent_numbers}\n"
                    f"**–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:** {parent_birth_year}\n"
                )
                update.message.reply_text(info, parse_mode=ParseMode.MARKDOWN)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
                if parent_location_lat and parent_location_lon:
                    update.message.reply_location(latitude=parent_location_lat, longitude=parent_location_lon)
                else:
                    update.message.reply_text("‚ùå –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
            else:
                update.message.reply_text("‚ö†Ô∏è –£—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞ –≤ QR-–∫–æ–¥–µ.")
    else:
        # –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user = update.effective_user
        buttons = [
            [KeyboardButton("üîç –ü–æ–∏—Å–∫ —É—á–µ–Ω–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É")],
            [KeyboardButton("üì∏ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥")],
        ]
        if is_teacher(user.id):
            buttons.append([KeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")])
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_text(
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def handle_text(update: Update, context: CallbackContext):
    text = update.message.text
    if text == "üîç –ü–æ–∏—Å–∫ —É—á–µ–Ω–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É":
        return search_student_start(update, context)
    elif text == "üì∏ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥":
        update.message.reply_text("üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å QR-–∫–æ–¥–æ–º.")
    elif text == "‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏":
        if is_teacher(update.effective_user.id):
            buttons = [
                [KeyboardButton("/add_student")],
                [KeyboardButton("/delete_student"), KeyboardButton("/add_teacher")],
                [KeyboardButton("/delete_teacher")],
                [KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            update.message.reply_text("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)
        else:
            update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.")
    elif text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return start(update, context)
    else:
        update.message.reply_text("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ QR-–∫–æ–¥–∞ —É—á–µ–Ω–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /get_qr <student_number>
def get_qr_code_handler(update: Update, context: CallbackContext):
    get_qr_code_command(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
def unknown(update: Update, context: CallbackContext):
    update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    
    # Conversation handler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
    conv_handler_add_student = ConversationHandler(
        entry_points=[CommandHandler('add_student', add_student_start)],
        states={
            ADD_STUDENT_NUMBER: [MessageHandler(Filters.text & ~Filters.command, add_student_number)],
            ADD_STUDENT_NAME: [MessageHandler(Filters.text & ~Filters.command, add_student_name)],
            ADD_STUDENT_SURNAME: [MessageHandler(Filters.text & ~Filters.command, add_student_surname)],
            ADD_STUDENT_PATRONYMIC: [MessageHandler(Filters.text & ~Filters.command, add_student_patronymic)],
            ADD_STUDENT_BIRTH_YEAR: [MessageHandler(Filters.text & ~Filters.command, add_student_birth_year)],
            ADD_STUDENT_PARENT_NUMBERS: [MessageHandler(Filters.text & ~Filters.command, add_student_parent_numbers)],
            ADD_STUDENT_PARENT_BIRTH_YEAR: [MessageHandler(Filters.text & ~Filters.command, add_student_parent_birth_year)],
            ADD_STUDENT_LOCATION: [MessageHandler(Filters.location, add_student_location)],
            ADD_STUDENT_PHOTO: [MessageHandler(Filters.photo, add_student_photo)],
            ADD_STUDENT_PARENT_PHOTO: [MessageHandler(Filters.photo, add_student_parent_photo)],
        },
        fallbacks=[CommandHandler('cancel', add_student_cancel)],
    )
    
    # Conversation handler –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–∞
    conv_handler_search_student = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('üîç –ü–æ–∏—Å–∫ —É—á–µ–Ω–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É'), search_student_start)],
        states={
            SEARCH_STUDENT_NUMBER: [MessageHandler(Filters.text & ~Filters.command, search_student_number)],
        },
        fallbacks=[CommandHandler('cancel', add_student_cancel)],
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(conv_handler_add_student)
    dp.add_handler(conv_handler_search_student)
    dp.add_handler(CommandHandler("add_teacher", add_teacher_command))
    dp.add_handler(CommandHandler("delete_teacher", delete_teacher_command))
    dp.add_handler(CommandHandler("delete_student", delete_student_command))
    dp.add_handler(CommandHandler("get_qr", get_qr_code_handler))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))
    dp.add_handler(MessageHandler(Filters.photo, handle_photo))
    dp.add_handler(MessageHandler(Filters.command, unknown))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()